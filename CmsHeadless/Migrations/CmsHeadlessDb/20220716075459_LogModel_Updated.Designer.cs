// <auto-generated />
using System;
using CmsHeadless.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CmsHeadless.Migrations.CmsHeadlessDb
{
    [DbContext(typeof(CmsHeadlessDbContext))]
    [Migration("20220716075459_LogModel_Updated")]
    partial class LogModel_Updated
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CmsHeadless.Models.Attributes", b =>
                {
                    b.Property<int>("AttributesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttributesId"), 1L, 1);

                    b.Property<string>("AttributeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AttributeValue")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("AttributesId");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("CmsHeadless.Models.AttributesTypology", b =>
                {
                    b.Property<int>("AttributesTypologyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttributesTypologyId"), 1L, 1);

                    b.Property<int>("AttributesId")
                        .HasColumnType("int");

                    b.Property<int>("TypologyId")
                        .HasColumnType("int");

                    b.HasKey("AttributesTypologyId");

                    b.HasIndex("AttributesId");

                    b.HasIndex("TypologyId");

                    b.ToTable("AttributesTypology");
                });

            modelBuilder.Entity("CmsHeadless.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<int?>("CategoryParentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Media")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("CmsHeadless.Models.Content", b =>
                {
                    b.Property<int>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContentId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastEdit")
                        .HasColumnType("datetime2");

                    b.Property<string>("Media")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("PubblicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ContentId");

                    b.HasIndex("UserId");

                    b.ToTable("Content");
                });

            modelBuilder.Entity("CmsHeadless.Models.ContentAttributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AttributesId")
                        .HasColumnType("int");

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttributesId");

                    b.HasIndex("ContentId");

                    b.ToTable("ContentAttributes");
                });

            modelBuilder.Entity("CmsHeadless.Models.ContentCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ContentId");

                    b.ToTable("ContentCategory");
                });

            modelBuilder.Entity("CmsHeadless.Models.ContentLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("LocationId");

                    b.ToTable("ContentLocation");
                });

            modelBuilder.Entity("CmsHeadless.Models.ContentTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("TagId");

                    b.ToTable("ContentTag");
                });

            modelBuilder.Entity("CmsHeadless.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"), 1L, 1);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NationId")
                        .HasColumnType("int");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("LocationId");

                    b.HasIndex("NationId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("RegionId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("CmsHeadless.Models.Log", b =>
                {
                    b.Property<int>("LogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogID"), 1L, 1);

                    b.Property<string>("LogBrowser")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("LogBrowserVersion")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("LogDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogDetails")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("LogEventLog_eventID")
                        .HasColumnType("int");

                    b.Property<string>("LogIPAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogNotes")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("LogOS")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LogOSVersion")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LogID");

                    b.HasIndex("LogEventLog_eventID");

                    b.HasIndex("UserId");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("CmsHeadless.Models.LogEvent", b =>
                {
                    b.Property<int>("Log_eventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Log_eventID"), 1L, 1);

                    b.Property<int>("LogTypeLog_typeID")
                        .HasColumnType("int");

                    b.Property<string>("Log_eventCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Log_eventDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Log_eventID");

                    b.HasIndex("LogTypeLog_typeID");

                    b.ToTable("LogEvent");
                });

            modelBuilder.Entity("CmsHeadless.Models.LogType", b =>
                {
                    b.Property<int>("Log_typeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Log_typeID"), 1L, 1);

                    b.Property<string>("Log_typeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Log_typeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Log_typeID");

                    b.ToTable("LogType");
                });

            modelBuilder.Entity("CmsHeadless.Models.Nation", b =>
                {
                    b.Property<int>("NationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NationId"), 1L, 1);

                    b.Property<bool>("NationIsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NationId");

                    b.ToTable("Nation");
                });

            modelBuilder.Entity("CmsHeadless.Models.Province", b =>
                {
                    b.Property<int>("ProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProvinceId"), 1L, 1);

                    b.Property<bool>("ProvinceIsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("ProvinceId");

                    b.HasIndex("RegionId");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("CmsHeadless.Models.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegionId"), 1L, 1);

                    b.Property<int>("NationId")
                        .HasColumnType("int");

                    b.Property<bool>("RegionIsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RegionId");

                    b.HasIndex("NationId");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("CmsHeadless.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("TagId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("CmsHeadless.Models.Typology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Typology");
                });

            modelBuilder.Entity("CmsHeadless.Models.UserTypology", b =>
                {
                    b.Property<int>("UserTypologyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserTypologyId"), 1L, 1);

                    b.Property<int>("TypologyId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserTypologyId");

                    b.HasIndex("TypologyId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTypology");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("CmsHeadless.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("LatitudeUser")
                        .HasColumnType("float");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<double>("LongitudeUser")
                        .HasColumnType("float");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("LocationId");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("CmsHeadless.Models.AttributesTypology", b =>
                {
                    b.HasOne("CmsHeadless.Models.Attributes", "Attributes")
                        .WithMany("AttributesTypology")
                        .HasForeignKey("AttributesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CmsHeadless.Models.Typology", "Typology")
                        .WithMany("AttributesTypology")
                        .HasForeignKey("TypologyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attributes");

                    b.Navigation("Typology");
                });

            modelBuilder.Entity("CmsHeadless.Models.Content", b =>
                {
                    b.HasOne("CmsHeadless.Models.User", "User")
                        .WithMany("Content")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CmsHeadless.Models.ContentAttributes", b =>
                {
                    b.HasOne("CmsHeadless.Models.Attributes", "Attributes")
                        .WithMany("ContentAttributes")
                        .HasForeignKey("AttributesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CmsHeadless.Models.Content", "Content")
                        .WithMany("ContentAttributes")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attributes");

                    b.Navigation("Content");
                });

            modelBuilder.Entity("CmsHeadless.Models.ContentCategory", b =>
                {
                    b.HasOne("CmsHeadless.Models.Category", "Category")
                        .WithMany("ContentCategory")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CmsHeadless.Models.Content", "Content")
                        .WithMany("ContentCategory")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Content");
                });

            modelBuilder.Entity("CmsHeadless.Models.ContentLocation", b =>
                {
                    b.HasOne("CmsHeadless.Models.Content", "Content")
                        .WithMany("ContentLocation")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CmsHeadless.Models.Location", "Location")
                        .WithMany("ContentLocation")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("CmsHeadless.Models.ContentTag", b =>
                {
                    b.HasOne("CmsHeadless.Models.Content", "Content")
                        .WithMany("ContentTag")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CmsHeadless.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("CmsHeadless.Models.Location", b =>
                {
                    b.HasOne("CmsHeadless.Models.Nation", "Nation")
                        .WithMany()
                        .HasForeignKey("NationId");

                    b.HasOne("CmsHeadless.Models.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.HasOne("CmsHeadless.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");

                    b.Navigation("Nation");

                    b.Navigation("Province");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("CmsHeadless.Models.Log", b =>
                {
                    b.HasOne("CmsHeadless.Models.LogEvent", "LogEvent")
                        .WithMany()
                        .HasForeignKey("LogEventLog_eventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CmsHeadless.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogEvent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CmsHeadless.Models.LogEvent", b =>
                {
                    b.HasOne("CmsHeadless.Models.LogType", "LogType")
                        .WithMany()
                        .HasForeignKey("LogTypeLog_typeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogType");
                });

            modelBuilder.Entity("CmsHeadless.Models.Province", b =>
                {
                    b.HasOne("CmsHeadless.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("CmsHeadless.Models.Region", b =>
                {
                    b.HasOne("CmsHeadless.Models.Nation", "Nation")
                        .WithMany()
                        .HasForeignKey("NationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nation");
                });

            modelBuilder.Entity("CmsHeadless.Models.UserTypology", b =>
                {
                    b.HasOne("CmsHeadless.Models.Typology", "Typology")
                        .WithMany("UserTypology")
                        .HasForeignKey("TypologyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CmsHeadless.Models.User", "User")
                        .WithMany("UserTypology")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Typology");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CmsHeadless.Models.User", b =>
                {
                    b.HasOne("CmsHeadless.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("CmsHeadless.Models.Attributes", b =>
                {
                    b.Navigation("AttributesTypology");

                    b.Navigation("ContentAttributes");
                });

            modelBuilder.Entity("CmsHeadless.Models.Category", b =>
                {
                    b.Navigation("ContentCategory");
                });

            modelBuilder.Entity("CmsHeadless.Models.Content", b =>
                {
                    b.Navigation("ContentAttributes");

                    b.Navigation("ContentCategory");

                    b.Navigation("ContentLocation");

                    b.Navigation("ContentTag");
                });

            modelBuilder.Entity("CmsHeadless.Models.Location", b =>
                {
                    b.Navigation("ContentLocation");
                });

            modelBuilder.Entity("CmsHeadless.Models.Typology", b =>
                {
                    b.Navigation("AttributesTypology");

                    b.Navigation("UserTypology");
                });

            modelBuilder.Entity("CmsHeadless.Models.User", b =>
                {
                    b.Navigation("Content");

                    b.Navigation("UserTypology");
                });
#pragma warning restore 612, 618
        }
    }
}
